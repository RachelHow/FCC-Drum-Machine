{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["data","id","letter","src","DrumPad","handleKeydown","e","keyCode","_this","props","charCodeAt","audio","play","currentTime","handleDisplay","handleClick","console","log","this","document","addEventListener","window","focus","removeEventListener","_this2","react_default","a","createElement","className","onClick","ref","Component","App","_this3","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","display","setState","state","_this4","map","d","App_DrumPad","key","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,SAAO,CACX,CAAEC,GAAI,OAAQC,OAAQ,IAAKC,IAAK,+FAChC,CAAEF,GAAI,SAAUC,OAAQ,IAAKC,IAAK,mGAClC,CAAEF,GAAI,UAAWC,OAAQ,IAAKC,IAAK,oGACnC,CAAEF,GAAI,SAAUC,OAAQ,IAAKC,IAAK,mGAClC,CAAEF,GAAI,OAAQC,OAAQ,IAAKC,IAAK,+FAChC,CAAEF,GAAI,OAAQC,OAAQ,IAAKC,IAAK,+FAChC,CAAEF,GAAI,OAAQC,OAAQ,IAAKC,IAAK,+FAChC,CAAEF,GAAI,UAAWC,OAAQ,IAAKC,IAAK,kGACnC,CAAEF,GAAI,OAAQC,OAAQ,IAAKC,IAAK,iGAG5BC,6MAYJC,cAAgB,SAAAC,GACXA,EAAEC,UAAYC,EAAKC,MAAMP,OAAOQ,eACjCF,EAAKG,MAAMC,OACXJ,EAAKG,MAAME,YAAc,EACzBL,EAAKC,MAAMK,cAAcN,EAAKC,MAAMR,QAIxCc,YAAc,WACZP,EAAKG,MAAMC,OACXJ,EAAKG,MAAME,YAAc,EACzBL,EAAKC,MAAMK,cAAcN,EAAKC,MAAMR,wFApBpCe,QAAQC,IAAIC,KAAKP,OACjBQ,SAASC,iBAAiB,UAAWF,KAAKb,eAC1CgB,OAAOC,uDAIPH,SAASI,oBAAoB,UAAWL,KAAKb,gDAiBvC,IAAAmB,EAAAN,KACN,OACEO,EAAAC,EAAAC,cAAA,OACEC,UAAU,WACV3B,GAAIiB,KAAKT,MAAMR,GACf4B,QAASX,KAAKH,aAEdU,EAAAC,EAAAC,cAAA,SAAIT,KAAKT,MAAMP,QACfuB,EAAAC,EAAAC,cAAA,SACEC,UAAU,OACV3B,GAAIiB,KAAKT,MAAMP,OACfC,IAAKe,KAAKT,MAAMN,IAChB0B,QAASX,KAAKH,YACde,IAAK,SAAAA,GAAG,OAAIN,EAAKb,MAAQmB,aAvCbC,aAmFPC,cApCb,SAAAA,EAAYvB,GAAM,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAhB,KAAAc,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAhB,KAAAgB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAApB,KAAMT,KAMRK,cAAgB,SAAAyB,GAAO,OAAIN,EAAKO,SAAS,CAAED,aALzCN,EAAKQ,MAAQ,CACXF,QAAS,WAHKN,wEAST,IAAAS,EAAAxB,KACP,OACEO,EAAAC,EAAAC,cAAA,OAAK1B,GAAG,aAENwB,EAAAC,EAAAC,cAAA,OAAK1B,GAAG,gBACNwB,EAAAC,EAAAC,cAAA,OAAK1B,GAAG,WACLiB,KAAKuB,MAAMF,SAGdd,EAAAC,EAAAC,cAAA,OAAK1B,GAAG,aACLD,EAAK2C,IAAI,SAAAC,GAAC,OACTnB,EAAAC,EAAAC,cAACkB,EAAD,CACEC,IAAOF,EAAE3C,GACTA,GAAM2C,EAAE3C,GACRC,OAAU0C,EAAE1C,OACZC,IAAOyC,EAAEzC,IACTW,cAAiB4B,EAAK5B,4BA1BpBiB,aCjDEgB,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASlC,SAASmC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8f97bc69.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst data = [\n  { id: 'CLHH', letter: 'Q', src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20CLHH.wav?1532352722339' },\n  { id: 'SNR D1', letter: 'W', src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20SNR%20D1.wav?1532352722730' },\n  { id: 'RIM SHT', letter: 'E', src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20RIM%20SHT.wav?1532352722795' },\n  { id: 'SNR D2', letter: 'A', src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20SNR%20D2.wav?1532352722873' },\n  { id: 'RIDE', letter: 'S', src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20RIDE.wav?1532352722922' },\n  { id: 'TOM1', letter: 'D', src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20TOM1.wav?1532352723451' },\n  { id: 'TOM2', letter: 'Z', src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20TOM2.wav?1532352723760' },\n  { id: 'COWBELL', letter: 'X', src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20COWBELL.wav?1532352724065' },\n  { id: 'OPHH', letter: 'C', src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20OPHH.wav?1532352724689' }\n]\n\nclass DrumPad extends Component {\n\n  componentDidMount() {\n    console.log(this.audio)\n    document.addEventListener('keydown', this.handleKeydown)\n    window.focus()\n  }\n  \n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeydown)\n  }\n\n  handleKeydown = e => {\n    if(e.keyCode === this.props.letter.charCodeAt()) {\n      this.audio.play()\n      this.audio.currentTime = 0\n      this.props.handleDisplay(this.props.id)\n    }\n  }\n\n  handleClick = () => {\n    this.audio.play()\n    this.audio.currentTime = 0\n    this.props.handleDisplay(this.props.id)\n  }\n\n  render(){\n    return (\n      <div \n        className=\"drum-pad\" \n        id={this.props.id}\n        onClick={this.handleClick}\n      >\n        <p>{this.props.letter}</p>\n        <audio \n          className='clip'\n          id={this.props.letter}\n          src={this.props.src}\n          onClick={this.handleClick}\n          ref={ref => this.audio = ref}\n          ></audio>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      display: 'PLAY ME'\n    }\n  }\n  \n  handleDisplay = display => this.setState({ display })\n\n  render() {\n    return (\n      <div id=\"drum-base\">\n\n        <div id=\"drum-machine\">\n          <div id=\"display\">\n            {this.state.display}\n          </div>\n\n          <div id=\"drum-pads\">\n            {data.map(d => (\n              <DrumPad\n                key = {d.id}\n                id = {d.id}\n                letter = {d.letter}\n                src = {d.src}\n                handleDisplay = {this.handleDisplay}\n              />\n            ))}\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}